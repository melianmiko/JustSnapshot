#!/usr/bin/env python3
import getpass
import jsnapshot_core
from jsnapshot_core.callback import ConsoleColor, AppCallback
from jsnapshot_core.config import AppConfig
from jsnapshot_core.cron_engine import cron_auto_config, PERIOD_NAMES
from jsnapshot_core.initializer import initialize_app

callback = AppCallback()
if getpass.getuser() != "root":
    callback.error("Run this command as superuser!")
    raise SystemExit(1)

app_config = AppConfig()

# List mounted BTRFS disks, ask user for target
disks = jsnapshot_core.find_devices()
colors = ConsoleColor

print("")
print(colors.HEADER + colors.BOLD + "STEP 1. Select your system disk." + colors.END)
print("")
print("Mounted BTRFS volumes:")

values = []
for i, line in enumerate(disks):
    print(" " + str(i) + " - " + line)
    values.append(str(i))

print("")
i = callback.question("Enter number of target device to use it.", values)
target = disks[int(i)]
app_config.target_device = target
app_config.save()

# Init app
initialize_app(callback)

# Bind volume, get list of root subvolumes
volume = jsnapshot_core.bind_root()
data = volume.list_root_subvolumes()

print("")
print(colors.HEADER + colors.BOLD + "STEP 2. Select subvolumes to backup." + colors.END)
print("")
print("Available BTRFS sub-volumes:")

values = []
for i, item in enumerate(data):
    print(" " + str(i) + " - " + item.path)
    values.append(str(i))

print("")
line = callback.input("Enter numbers of volumes separated with space. Example, if you want to backup " +
                      "first and third, enter '0 2'.")

subvolumes = []
for period in line.split(" "):
    val = data[int(period)]
    print("Selected subvolume", val)
    subvolumes.append(val.path)

app_config.subvolumes = subvolumes
app_config.save()

# Timetable setup
print("")
print(colors.HEADER + colors.BOLD + "STEP 3. Configure auto-snapshot timetable." + colors.END)
print("")

print("Enter count of auto-snapshots for every period. If you don't need auto-backup in some period, enter zero (0).")
for period in PERIOD_NAMES:
    value = -1
    while value < 0:
        try:
            value = int(callback.input("Enter count of " + period + " snapshots."))
        except ValueError:
            callback.warn("Please enter integer number, greater or equal zero.")
    app_config.timetable[period] = value

print()
app_config.save()
cron_auto_config()

print("Configuration updated. Now you can use this application.")
