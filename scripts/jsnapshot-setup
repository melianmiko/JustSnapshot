#!/usr/bin/env python3
# noinspection PyUnresolvedReferences
import sys
import os

if sys.version_info.major < 3:
    raise Exception("Just Snapshot should be run with Python 3")

# Add project root directory (enable symlink and trunk execution)
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

python_path = []
if os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'jsnapshot_core')) and PROJECT_ROOT_DIRECTORY not in sys.path:
    python_path.insert(0, PROJECT_ROOT_DIRECTORY)
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)

if python_path:
    os.putenv('PYTHONPATH', "%s:%s" % (os.getenv('PYTHONPATH', ''), ':'.join(python_path)))  # for subprocesses

import getpass
import jsnapshot_core

callback = jsnapshot_core.AppCallback()
if getpass.getuser() != "root":
    callback.error("Run this command as superuser!")
    raise SystemExit(1)

app_config = jsnapshot_core.AppConfig()

# List mounted BTRFS disks, ask user for target
disks = jsnapshot_core.find_devices()
colors = jsnapshot_core.ConsoleColor

print("")
print(colors.HEADER + colors.BOLD + "STEP 1. Select your system disk." + colors.END)
print("")
print("Mounted BTRFS volumes:")

values = []
for i, line in enumerate(disks):
    print(" " + str(i) + " - " + line)
    values.append(str(i))

print("")
i = callback.question("Enter number of target device to use it.", values)
target = disks[int(i)]
app_config.target_device = target
app_config.save()

# Init app
jsnapshot_core.initialize_app(callback)

# Bind volume, get list of root subvolumes
volume = jsnapshot_core.bind_root()
data = volume.list_root_subvolumes()

print("")
print(colors.HEADER + colors.BOLD + "STEP 2. Select subvolumes to backup." + colors.END)
print("")
print("Available BTRFS sub-volumes:")

values = []
for i, item in enumerate(data):
    print(" " + str(i) + " - " + item.path)
    values.append(str(i))

print("")
line = callback.input("Enter numbers of volumes separated with space. Example, if you want to backup " +
                      "first and third, enter '0 2'.")

subvolumes = []
for period in line.split(" "):
    val = data[int(period)]
    print("Selected subvolume", val)
    subvolumes.append(val.path)

app_config.subvolumes = subvolumes
app_config.save()

# Timetable setup
print("")
print(colors.HEADER + colors.BOLD + "STEP 3. Configure auto-snapshot timetable." + colors.END)
print("")

print("Enter count of auto-snapshots for every period. If you don't need auto-backup in some period, enter zero (0).")
for period in jsnapshot_core.PERIOD_NAMES:
    value = -1
    while value < 0:
        try:
            value = int(callback.input("Enter count of " + period + " snapshots."))
        except ValueError:
            callback.warn("Please enter integer number, greater or equal zero.")
    app_config.timetable[period] = value

print()
app_config.save()
jsnapshot_core.cron_auto_config()

print("Configuration updated. Now you can use this application.")
