#!/usr/bin/env python3
import argparse
import jsnapshot_core

from jsnapshot_core.callback import AppCallback
from jsnapshot_core.engine import BackupEngine
from jsnapshot_core.initializer import initialize_app

parser = argparse.ArgumentParser(prog="jsnapshot-restore", description="Restore snapshot")
parser.add_argument("snapshot", type=str, help="Snapshot name")
parser.add_argument("parts", type=str, help="List of subvolumes to recover, or 'all'. " +
                                            "Example: \n\tjsnapshot-restore 2021-01-01_11-11-11 @,@home")
args = parser.parse_args()

callback = AppCallback()
result = initialize_app(callback)
if not result:
    callback.error("App init failed")
    raise SystemExit(1)

volume = jsnapshot_core.bind_root()
engine = BackupEngine(callback, volume)
snapshots = engine.list_snapshots()

item = None
for a in snapshots:
    if a.name == args.snapshot:
        item = a

if item is None:
    callback.warn("Snapshot with name " + args.snapshot + " not found")
    raise SystemExit(1)

full_recover = args.parts == "all"
parts = []

if not full_recover:
    parts = args.parts.split(",")
    for a in parts:
        if not os.path.isdir(item.path + "/" + a):
            callback.error("Part not found: " + a)
            raise SystemExit(1)

callback.warn("Recovering system with snapshot " + item.name)
if not full_recover:
    callback.warn("Using this parts: " + str(parts))

try:
    engine.restore_snapshot(item, parts=parts, full=full_recover)
except Exception:
    traceback.print_exc()
    callback.error("Operation failed.")
    raise SystemExit(1)
