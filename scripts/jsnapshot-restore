#!/usr/bin/env python3
import sys
import os

if sys.version_info.major < 3:
    raise Exception("Just Snapshot should be run with Python 3")

# Add project root directory (enable symlink and trunk execution)
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

python_path = []
if os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'jsnapshot_core')) and PROJECT_ROOT_DIRECTORY not in sys.path:
    python_path.insert(0, PROJECT_ROOT_DIRECTORY)
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)

if python_path:
    os.putenv('PYTHONPATH', "%s:%s" % (os.getenv('PYTHONPATH', ''), ':'.join(python_path)))  # for subprocesses

import argparse
import traceback

import jsnapshot_core

parser = argparse.ArgumentParser(prog="jsnapshot-restore", description="Restore snapshot")
parser.add_argument("snapshot", type=str, help="Snapshot name")
parser.add_argument("parts", type=str, help="List of subvolumes to recover, or 'all'. " +
                                            "Example: \n\tjsnapshot-restore 2021-01-01_11-11-11 @,@home")
args = parser.parse_args()

callback = jsnapshot_core.AppCallback()
result = jsnapshot_core.initialize_app(callback)
if not result:
    callback.error("App init failed")
    raise SystemExit(1)

volume = jsnapshot_core.bind_root()
engine = jsnapshot_core.BackupEngine(callback, volume)
snapshots = engine.list_snapshots()

item = None
for a in snapshots:
    if a.name == args.snapshot:
        item = a

if item is None:
    callback.warn("Snapshot with name " + args.snapshot + " not found")
    raise SystemExit(1)

full_recover = args.parts == "all"
parts = []

if not full_recover:
    parts = args.parts.split(",")
    for a in parts:
        if not os.path.isdir(item.path + "/" + a):
            callback.error("Part not found: " + a)
            raise SystemExit(1)

callback.warn("Recovering system with snapshot " + item.name)
if not full_recover:
    callback.warn("Using this parts: " + str(parts))

try:
    engine.restore_snapshot(item, parts=parts, full=full_recover)
except Exception:
    traceback.print_exc()
    callback.error("Operation failed.")
    raise SystemExit(1)
