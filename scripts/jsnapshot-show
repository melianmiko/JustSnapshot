#!/usr/bin/env python3
import sys
import os

if sys.version_info.major < 3:
    raise Exception("Just Snapshot should be run with Python 3")

# Add project root directory (enable symlink and trunk execution)
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

python_path = []
if os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'jsnapshot_core')) and PROJECT_ROOT_DIRECTORY not in sys.path:
    python_path.insert(0, PROJECT_ROOT_DIRECTORY)
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)

if python_path:
    os.putenv('PYTHONPATH', "%s:%s" % (os.getenv('PYTHONPATH', ''), ':'.join(python_path)))  # for subprocesses

import argparse
import json
import os.path
import jsnapshot_core

parser = argparse.ArgumentParser(prog="jsnapshot-show", description="Get snapshot info.")
parser.add_argument("snapshot", type=str, help="Snapshot name")
args = parser.parse_args()
name = args.snapshot

callback = jsnapshot_core.AppCallback()
result = jsnapshot_core.initialize_app(callback)
if not result:
    callback.error("App init failed")
    raise SystemExit(1)

volume = jsnapshot_core.bind_root()
engine = jsnapshot_core.BackupEngine(callback, volume)
snapshots = engine.list_snapshots()

item = None
for a in snapshots:
    if a.name == name:
        item = a

if item is None:
    callback.warn("Snapshot with name " + name + " not found")
    raise SystemExit(1)

KEY_WIDTH = 32
colors = jsnapshot_core.ConsoleColor

print()
print(colors.BOLD + "Snapshot metadata:" + colors.END)
for a in item.metadata:
    if isinstance(item.metadata[a], str):
        print(" " + a.ljust(KEY_WIDTH) + " = " + item.metadata[a])


print()
print(colors.BOLD + "Snapshot tags:" + colors.END)
if "tags" in item.metadata:
    for a in item.metadata["tags"]:
        print("  " + a)

# Read recover_paths file
print()
parts = item.metadata["subvolumes"]
for info in parts:
    print(colors.BOLD + "Subvolume " + info["backup"] + ":" + colors.END)
    print(" " + "Source path".ljust(KEY_WIDTH) + " = " + info["source"])

    subvolume = volume.get_subvolume(info["backup"])
    if not subvolume.exists():
        callback.error("Snapshot is broken: one or more subvolume not found")
        raise SystemExit(2)

    print(" " + "Full size".ljust(KEY_WIDTH) + " = " + subvolume.size_full)
    print(" " + "Unique size".ljust(KEY_WIDTH) + " = " + subvolume.size_unique)

    print()
